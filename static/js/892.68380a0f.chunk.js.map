{"version":3,"file":"static/js/892.68380a0f.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","redux/selectors.js","components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactItem/ContactItem.styled.jsx","components/ContactsList/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/Contacts/Contacts.jsx","pages/ContactsView.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 20px;\n`;\n\nconst ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  width: 800px;\n  padding: 20px;\n\n  background-color: #332b00;\n  border: 2px solid #f2ab26;\n  border-radius: 20px;\n`;\n\nconst Title = styled.h1`\n  font-size: 50px;\n  color: #f2ab26;\n`;\n\nconst ListTitle = styled.h2`\n  font-size: 40px;\n  color: #f2ab26;\n  margin-top: 20px;\n`;\n\nexport { Container, ContactsContainer, Title, ListTitle };\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n\n  const filter = selectFilterValue(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n\n  width: 400px;\n  margin-top: 20px;\n`;\n\nconst InputBlock = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst InputName = styled.span`\n  font-size: 20px;\n  color: #f2ab26;\n`;\n\nconst NewContactValue = styled.input`\n  width: 260px;\n  height: 40px;\n  font-size: 20px;\n  padding: 0 10px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  transition: 300ms;\n\n  :hover,\n  :focus {\n    border: 2px solid #00f90f;\n  }\n`;\n\nconst AddContact = styled.button`\n  width: 180px;\n  height: 40px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  font-size: 20px;\n\n  cursor: pointer;\n  transition: 300ms;\n\n  :hover {\n    background-color: #003300;\n    border: 2px solid #00f90f;\n    color: #00f90f;\n  }\n`;\n\nexport { Form, InputBlock, InputName, NewContactValue, AddContact };\n","import { useState } from 'react';\nimport { selectContacts, selectIsLoading } from 'redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nimport { Oval } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport shortid from 'shortid';\n\nimport {\n  Form,\n  InputBlock,\n  InputName,\n  NewContactValue,\n  AddContact,\n} from './ContactsForm.styled';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const normalizedName = name.toLowerCase();\n\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (existingContact) {\n      toast.error(`${name}: is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ id: shortid.generate(), name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputBlock>\n        <InputName>Name:</InputName>\n        <NewContactValue\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleInputChange}\n          autoComplete=\"off\"\n        />\n      </InputBlock>\n\n      <InputBlock>\n        <InputName>Number:</InputName>\n        <NewContactValue\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleInputChange}\n          autoComplete=\"off\"\n        />\n      </InputBlock>\n\n      {isLoading ? (\n        <Oval\n          height={60}\n          width={60}\n          color=\"#f2ab26\"\n          wrapperStyle={{}}\n          wrapperClass=\"loaderMargin\"\n          visible={true}\n          ariaLabel=\"oval-loading\"\n          secondaryColor=\"#f2ab26\"\n          strokeWidth={2}\n          strokeWidthSecondary={2}\n        />\n      ) : (\n        <AddContact>Add contact</AddContact>\n      )}\n    </Form>\n  );\n};\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 600px;\n  margin-top: 20px;\n`;\n\nconst InputName = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  margin: 0 auto;\n  font-size: 20px;\n  color: #f2ab26;\n`;\n\nconst FilterValue = styled.input`\n  width: 240px;\n  height: 40px;\n  font-size: 20px;\n  padding: 0 10px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  transition: 300ms;\n\n  :hover,\n  :focus {\n    border: 2px solid #00f90f;\n  }\n`;\n\nexport { Form, InputName, FilterValue };\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterChange } from 'redux/filterSlice';\n\nimport { Form, InputName, FilterValue } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const [filterValue, setFilterValue] = useState('');\n\n  const changeFilter = e => {\n    setFilterValue(e.currentTarget.value);\n  };\n\n  useEffect(() => {\n    dispatch(filterChange(filterValue));\n  }, [dispatch, filterValue]);\n\n  return (\n    <Form>\n      <InputName>\n        Find contacts by name:\n        <FilterValue type=\"text\" value={filterValue} onChange={changeFilter} />\n      </InputName>\n    </Form>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n\n  margin-top: 20px;\n`;\n\nexport { List };\n","import styled from '@emotion/styled';\n\nconst Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 600px;\n`;\n\nconst ContactValue = styled.span`\n  width: 300px;\n  font-size: 20px;\n  color: #f2ab26;\n  color: ${props => {\n    if (props.isCompleted === true) {\n      return '#00f90f';\n    } else if (props.isCompleted === false) {\n      return '#ff0000';\n    }\n    return '#f2ab26';\n  }};\n`;\n\nconst RemoveContact = styled.button`\n  width: 100px;\n  height: 40px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  font-size: 20px;\n\n  cursor: pointer;\n  transition: 300ms;\n\n  :hover {\n    background-color: #290000;\n    border: 2px solid #c81a00;\n    color: #c81a00;\n  }\n`;\n\nexport { Contact, ContactValue, RemoveContact };\n","import PropTypes from 'prop-types';\nimport { Contact, ContactValue, RemoveContact } from './ContactItem.styled';\n\nconst ContactItem = ({ name, number, id, deleteContact }) => (\n  <Contact>\n    <ContactValue>{name}</ContactValue>\n\n    <ContactValue>{number}</ContactValue>\n\n    <RemoveContact\n      type=\"button\"\n      onClick={() => {\n        deleteContact(id);\n      }}\n    >\n      Delete\n    </RemoveContact>\n  </Contact>\n);\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n  deleteContact: PropTypes.func,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilterValue } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact } from 'redux/operations';\n\nimport { List } from './ContactsList.styled';\n\nimport ContactItem from './ContactItem/ContactItem';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    const normalizedFilterValue = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilterValue)\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            key={id}\n            name={name}\n            number={number}\n            id={id}\n            deleteContact={() => dispatch(deleteContact(id))}\n          />\n        );\n      })}\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import {\n  Container,\n  ContactsContainer,\n  Title,\n  ListTitle,\n} from './Contacts.styled';\n\nimport ContactsForm from 'components/ContactsForm';\nimport Filter from 'components/Filter';\nimport ContactsList from 'components/ContactsList';\n\nconst Contacts = () => {\n  return (\n    <Container>\n      <ContactsContainer>\n        <Title>Phonebook</Title>\n\n        <ContactsForm />\n\n        <ListTitle>Contacts</ListTitle>\n\n        <Filter />\n\n        <ContactsList />\n      </ContactsContainer>\n    </Container>\n  );\n};\n\nexport default Contacts;\n","import Contacts from 'components/Contacts';\n\nconst ContactsView = () => {\n  return (\n    <>\n      <Contacts />\n    </>\n  );\n};\n\nexport default ContactsView;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["Container","styled","ContactsContainer","Title","ListTitle","selectContacts","state","contacts","items","selectFilterValue","filter","selectIsLoading","isLoading","Form","InputBlock","InputName","NewContactValue","AddContact","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","e","currentTarget","value","onSubmit","preventDefault","normalizedName","toLowerCase","find","contact","toast","addContact","id","shortid","type","title","required","onChange","autoComplete","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","FilterValue","filterValue","setFilterValue","useEffect","filterChange","List","Contact","ContactValue","props","isCompleted","RemoveContact","deleteContact","onClick","fetchContacts","visibleContacts","normalizedFilterValue","includes","getVisibleContacts","map","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}